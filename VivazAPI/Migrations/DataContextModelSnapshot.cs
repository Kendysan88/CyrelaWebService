// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VivazAPI.Data;

namespace VivazAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("VivazAPI.Models.ActivityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("WarrantyInYears")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81fed1bb-8b00-418b-80e2-b64f6d82b937"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 42, DateTimeKind.Local).AddTicks(9417),
                            Description = "Instalação de equipamentos industrializados, como aquecedores, motobombas, filtros e interfones.",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 42, DateTimeKind.Local).AddTicks(9422),
                            WarrantyInYears = 1
                        },
                        new
                        {
                            Id = new Guid("631f6a11-0ca9-4dba-827b-23b77c9b723d"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 43, DateTimeKind.Local).AddTicks(350),
                            Description = "Borrachas, escovas, articulações, fechos e roldanas de esquadrias de alumínio ou PVC.",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 43, DateTimeKind.Local).AddTicks(354),
                            WarrantyInYears = 2
                        },
                        new
                        {
                            Id = new Guid("3114d9d9-9a97-4709-8495-b61fd85d35a5"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 43, DateTimeKind.Local).AddTicks(370),
                            Description = "Fundações, estruturas principais e periféricas, contenções e arrimos, envolvendo segurança e estabilidade.",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 43, DateTimeKind.Local).AddTicks(371),
                            WarrantyInYears = 5
                        });
                });

            modelBuilder.Entity("VivazAPI.Models.AddressState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("AddressStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaea3b4b-abb2-4de1-ac18-af635809d6ba"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 43, DateTimeKind.Local).AddTicks(1329),
                            Name = "São Paulo",
                            Uf = "SP",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 43, DateTimeKind.Local).AddTicks(1334)
                        },
                        new
                        {
                            Id = new Guid("7ddba2e2-44dd-4ecf-bff7-26cfbef324d9"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 43, DateTimeKind.Local).AddTicks(2428),
                            Name = "Rio de Janeiro",
                            Uf = "RJ",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 43, DateTimeKind.Local).AddTicks(2433)
                        },
                        new
                        {
                            Id = new Guid("fa3cec69-828e-4aec-bbe8-ba73108672c7"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 43, DateTimeKind.Local).AddTicks(2439),
                            Name = "Recife",
                            Uf = "RE",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 43, DateTimeKind.Local).AddTicks(2440)
                        });
                });

            modelBuilder.Entity("VivazAPI.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7d8660e-cf45-43c2-8305-0b90e8cbf176"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 42, DateTimeKind.Local).AddTicks(7806),
                            Title = "Cyrela",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 42, DateTimeKind.Local).AddTicks(7814)
                        },
                        new
                        {
                            Id = new Guid("ed0c5448-236d-4c0c-ad34-7b001237fc91"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 42, DateTimeKind.Local).AddTicks(8351),
                            Title = "Living",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 42, DateTimeKind.Local).AddTicks(8355)
                        },
                        new
                        {
                            Id = new Guid("055e7a0e-2a08-4a79-8ddb-ee95eb200b29"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 42, DateTimeKind.Local).AddTicks(8362),
                            Title = "Vivaz",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 42, DateTimeKind.Local).AddTicks(8363)
                        });
                });

            modelBuilder.Entity("VivazAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6de1a5ef-5a81-411c-9889-b233d2ae0540"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 40, DateTimeKind.Local).AddTicks(4750),
                            Email = "admin_user@mail.com",
                            Password = "admin123456",
                            Role = "admin",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 41, DateTimeKind.Local).AddTicks(841)
                        },
                        new
                        {
                            Id = new Guid("61e7f82f-1300-4906-aac5-c8348cde67a2"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 41, DateTimeKind.Local).AddTicks(3716),
                            Email = "employee_user@mail.com",
                            Password = "employee123456",
                            Role = "employee",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 41, DateTimeKind.Local).AddTicks(3722)
                        },
                        new
                        {
                            Id = new Guid("55151c81-dbbc-4df7-9864-085c5705b016"),
                            CreatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 41, DateTimeKind.Local).AddTicks(3731),
                            Email = "customer_user@mail.com",
                            Password = "customer123456",
                            Role = "customer",
                            UpdatedAt = new DateTime(2021, 4, 18, 8, 41, 22, 41, DateTimeKind.Local).AddTicks(3732)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
